#!/usr/bin/env python3
"""
3D-style Interactive Realtime Launcher for macOS
Features:
- Clock & calendar updating every second
- Scrolling reminder text
- 3D-style app buttons with hover glow
- Dynamic grid layout (auto adjust full/small screen)
- Add new apps (web or local)
- Background image support
- Customizable fonts, colors, button styles
"""

import tkinter as tk
from tkinter import colorchooser, font as tkfont, filedialog, simpledialog
from datetime import datetime
import calendar
import webbrowser
import subprocess
from PIL import Image, ImageTk

UPDATE_INTERVAL = 1000
SCROLL_SPEED = 100

# Default settings
bg_color = "#1e1e1e"
fg_color = "#00ff00"
font_name = "Helvetica"
font_size = 24
reminder_text = "Welcome to your Realtime Launcher! "

WEB_APPS = {
    "Google Docs": "https://docs.google.com/",
    "ChatGPT": "https://chat.openai.com/",
    "YouTube": "https://www.youtube.com/",
    "Spotify": "https://open.spotify.com/",
    "D2L": "https://d2l.com/"
}

SPOTIFY_TRACK = "https://open.spotify.com/track/4PTG3Z6ehGkBFwjybzWkR8"
WEATHER_LINK = "https://www.accuweather.com/en/us/tucson/85716/weather-forecast/346936"

class HoverButton(tk.Button):
    """3D-style button with hover glow"""
    def __init__(self, master=None, **kw):
        super().__init__(master=master, **kw)
        self.default_bg = kw.get('bg', '#333')
        self.hover_bg = "#ff69b4"
        self.default_relief = tk.RAISED
        self.hover_relief = tk.RIDGE
        self.bind("<Enter>", self.on_enter)
        self.bind("<Leave>", self.on_leave)

    def on_enter(self, e):
        self['bg'] = self.hover_bg
        self['relief'] = self.hover_relief

    def on_leave(self, e):
        self['bg'] = self.default_bg
        self['relief'] = self.default_relief

class Launcher:
    def __init__(self, root):
        self.root = root
        root.title("3D Interactive Realtime Launcher")
        root.state("zoomed")
        self.width = root.winfo_screenwidth()
        self.height = root.winfo_screenheight()
        self.bg_image = None
        self.app_buttons = {}
        self.reminder_index = 0

        # Top Clock and Date
        self.clock_label = tk.Label(root, font=(font_name, font_size), fg=fg_color, bg=bg_color)
        self.clock_label.pack(pady=10)
        self.date_label = tk.Label(root, font=(font_name, font_size-4), fg=fg_color, bg=bg_color)
        self.date_label.pack(pady=5)

        # Right-side Calendar
        self.cal_frame = tk.Frame(root, bg=bg_color)
        self.cal_frame.pack(side="right", padx=20, pady=20)
        self.cal_labels = []

        # Reminder scrolling text
        self.reminder_label = tk.Label(root, font=(font_name, font_size-4), fg=fg_color, bg=bg_color)
        self.reminder_label.pack(side="bottom", pady=10)

        # Apps grid frame
        self.apps_frame = tk.Frame(root, bg=bg_color)
        self.apps_frame.pack(side="left", padx=20, pady=20, fill="both", expand=True)

        # Load initial apps
        self.load_app_buttons()

        # Extra buttons
        tk.Button(self.apps_frame, text="Open Spotify Track", command=lambda: webbrowser.open(SPOTIFY_TRACK),
                  font=(font_name, font_size-2), bg="#333", fg="#fff", width=20).grid(pady=5, sticky="ew")
        tk.Button(self.apps_frame, text="Weather", command=lambda: webbrowser.open(WEATHER_LINK),
                  font=(font_name, font_size-2), bg="#333", fg="#fff", width=20).grid(pady=5, sticky="ew")

        # Settings button
        self.settings_btn = tk.Button(root, text="Settings", command=self.open_settings,
                                      font=(font_name, font_size-2), bg="#ff69b4", fg="#000")
        self.settings_btn.pack(side="top", pady=10)

        # Start updates
        self.update_clock()
        self.update_calendar()
        self.scroll_text()

    def load_app_buttons(self):
        # Clear existing buttons
        for btn in self.app_buttons.values():
            btn.destroy()
        self.app_buttons.clear()
        # Place apps in a responsive grid
        row = 0
        col = 0
        max_cols = 3
        for name, path in WEB_APPS.items():
            btn = HoverButton(self.apps_frame, text=name, command=lambda u=path: self.open_app(u),
                              font=(font_name, font_size-2), bg="#333", fg="#fff", width=20)
            btn.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
            self.apps_frame.grid_columnconfigure(col, weight=1)
            self.apps_frame.grid_rowconfigure(row, weight=1)
            self.app_buttons[name] = btn
            col += 1
            if col >= max_cols:
                col = 0
                row += 1

    def open_app(self, path):
        if path.startswith("http"):
            webbrowser.open(path)
        else:
            subprocess.Popen(["open", path])

    def update_clock(self):
        now = datetime.now()
        self.clock_label.config(text=now.strftime("%I:%M:%S %p"))
        self.date_label.config(text=now.strftime("%A, %B %d, %Y"))
        self.root.after(UPDATE_INTERVAL, self.update_clock)

    def update_calendar(self):
        for lbl in self.cal_labels:
            lbl.destroy()
        self.cal_labels.clear()
        now = datetime.now()
        cal_text = calendar.month(now.year, now.month)
        for line in cal_text.splitlines():
            lbl = tk.Label(self.cal_frame, text=line, font=(font_name, 14), fg=fg_color, bg=bg_color, justify="right")
            lbl.pack(anchor="e")
            self.cal_labels.append(lbl)
        today = str(now.day)
        for lbl in self.cal_labels:
            if today in lbl.cget("text").split():
                lbl.config(bg="pink")
        self.root.after(UPDATE_INTERVAL, self.update_calendar)

    def scroll_text(self):
        display = reminder_text[self.reminder_index:] + reminder_text[:self.reminder_index]
        self.reminder_label.config(text=display)
        self.reminder_index = (self.reminder_index + 1) % len(reminder_text)
        self.root.after(SCROLL_SPEED, self.scroll_text)

    def open_settings(self):
        win = tk.Toplevel(self.root)
        win.title("Settings")
        win.geometry("400x600")
        win.configure(bg=bg_color)

        # Background color
        tk.Label(win, text="Background Color:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(win, text="Choose", command=self.change_bg_color).pack(pady=5)
        # Background image
        tk.Button(win, text="Choose Background Image", command=self.change_bg_image).pack(pady=5)
        # Font color
        tk.Label(win, text="Font Color:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(win, text="Choose", command=self.change_font_color).pack(pady=5)
        # Font size
        tk.Label(win, text="Font Size:", bg=bg_color, fg=fg_color).pack(pady=5)
        size_var = tk.IntVar(value=font_size)
        tk.Spinbox(win, from_=8, to=72, textvariable=size_var, command=lambda: self.change_font_size(size_var.get())).pack(pady=5)
        # Reminder text
        tk.Label(win, text="Scrolling Reminder Text:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(win, text="Edit Reminder Text", command=self.change_reminder_text).pack(pady=5)
        # Add new app
        tk.Label(win, text="Add Web or Local App:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(win, text="Add App", command=self.add_new_app).pack(pady=5)

    def change_bg_color(self):
        global bg_color
        color = colorchooser.askcolor()[1]
        if color:
            bg_color = color
            self.root.configure(bg=bg_color)
            self.clock_label.config(bg=bg_color)
            self.date_label.config(bg=bg_color)
            self.reminder_label.config(bg=bg_color)
            self.cal_frame.config(bg=bg_color)
            self.apps_frame.config(bg=bg_color)

    def change_bg_image(self):
        path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png *.jpg *.jpeg *.gif")])
        if path:
            img = Image.open(path).resize((self.width, self.height))
            self.bg_image = ImageTk.PhotoImage(img)
            lbl = tk.Label(self.root, image=self.bg_image)
            lbl.place(x=0, y=0, relwidth=1, relheight=1)
            # Keep other widgets on top
            self.clock_label.lift()
            self.date_label.lift()
            self.reminder_label.lift()
            self.cal_frame.lift()
            self.apps_frame.lift()
            self.settings_btn.lift()

    def change_font_color(self):
        global fg_color
        color = colorchooser.askcolor()[1]
        if color:
            fg_color = color
            self.clock_label.config(fg=fg_color)
            self.date_label.config(fg=fg_color)
            self.reminder_label.config(fg=fg_color)
            for lbl in self.cal_labels:
                lbl.config(fg=fg_color)

    def change_font_size(self, size):
        global font_size
        font_size = size
        self.clock_label.config(font=(font_name, font_size))
        self.date_label.config(font=(font_name, font_size-4))
        self.reminder_label.config(font=(font_name, font_size-4))
        for btn in self.app_buttons.values():
            btn.config(font=(font_name, font_size-2))

    def change_reminder_text(self):
        global reminder_text
        new_text = simpledialog.askstring("Reminder Text", "Enter new scrolling text:", parent=self.root)
        if new_text:
            reminder_text = new_text

    def add_new_app(self):
        name = simpledialog.askstring("App Name", "Enter App Name:", parent=self.root)
        path = simpledialog.askstring("App URL/Path", "Enter Web URL or Local App Path:", parent=self.root)
        if name and path:
            WEB_APPS[name] = path
            self.load_app_buttons()


if __name__ == "__main__":
    root = tk.Tk()
    launcher = Launcher(root)
    root.mainloop()