#!/usr/bin/env python3
"""
Realtime Launcher for macOS
Features:
- Clock and calendar updating every second
- Scrolling reminder text
- Launch web apps: Google Docs, ChatGPT, YouTube, Spotify, D2L
- Settings for colors, fonts, backgrounds, label sizes
- Open Spotify playlist
- Display weather link
- Full screen or windowed mode
"""

import tkinter as tk
from tkinter import colorchooser, font as tkfont, filedialog
from datetime import datetime
import calendar
import webbrowser
import subprocess
from PIL import Image, ImageTk

UPDATE_INTERVAL = 1000  # 1 second

# Default settings
bg_color = "#1e1e1e"
fg_color = "#00ff00"
font_name = "Helvetica"
font_size = 24
reminder_text = "Don't forget to drink water! "
scroll_speed = 200  # milliseconds

WEB_APPS = {
    "Google Docs": "https://docs.google.com/",
    "ChatGPT": "https://chat.openai.com/",
    "YouTube": "https://www.youtube.com/",
    "Spotify": "https://open.spotify.com/",
    "D2L": "https://d2l.com/"
}

SPOTIFY_TRACK = "https://open.spotify.com/track/4PTG3Z6ehGkBFwjybzWkR8"
WEATHER_LINK = "https://www.accuweather.com/en/us/tucson/85716/weather-forecast/346936"

class RealtimeLauncher:
    def __init__(self, root):
        self.root = root
        root.title("Realtime Launcher")
        root.configure(bg=bg_color)
        root.state("zoomed")  # Fullscreen mode
        self.width = root.winfo_screenwidth()
        self.height = root.winfo_screenheight()

        # Clock & Date
        self.clock_label = tk.Label(root, font=(font_name, font_size), fg=fg_color, bg=bg_color)
        self.clock_label.pack(pady=10)

        self.date_label = tk.Label(root, font=(font_name, font_size-4), fg=fg_color, bg=bg_color)
        self.date_label.pack(pady=5)

        # Calendar frame
        self.cal_frame = tk.Frame(root, bg=bg_color)
        self.cal_frame.pack(side="right", padx=20, pady=20)
        self.cal_labels = []

        # Reminder scrolling text
        self.reminder_label = tk.Label(root, font=(font_name, font_size-4), fg=fg_color, bg=bg_color)
        self.reminder_label.pack(side="bottom", pady=10)
        self.reminder_index = 0

        # Web apps buttons
        self.web_frame = tk.Frame(root, bg=bg_color)
        self.web_frame.pack(side="left", padx=20, pady=20)
        for app, url in WEB_APPS.items():
            btn = tk.Button(self.web_frame, text=app, command=lambda u=url: webbrowser.open(u),
                            font=(font_name, font_size-2), bg="#333", fg="#fff", width=15)
            btn.pack(pady=5)

        # Settings button
        self.settings_btn = tk.Button(root, text="Settings", command=self.open_settings,
                                      font=(font_name, font_size-2), bg="#ff69b4", fg="#000")
        self.settings_btn.pack(side="top", pady=10)

        # Start updates
        self.update_clock()
        self.update_calendar()
        self.scroll_text()

    def update_clock(self):
        now = datetime.now()
        time_str = now.strftime("%I:%M:%S %p")  # 12-hour format
        date_str = now.strftime("%A, %B %d, %Y")
        self.clock_label.config(text=time_str)
        self.date_label.config(text=date_str)
        self.root.after(UPDATE_INTERVAL, self.update_clock)

    def update_calendar(self):
        for lbl in self.cal_labels:
            lbl.destroy()
        self.cal_labels.clear()
        now = datetime.now()
        cal_text = calendar.month(now.year, now.month)
        cal_lines = cal_text.splitlines()
        for line in cal_lines:
            lbl = tk.Label(self.cal_frame, text=line, font=(font_name, 14), fg=fg_color, bg=bg_color, justify="right")
            lbl.pack(anchor="e")
            self.cal_labels.append(lbl)

        # Highlight today's day
        today = now.day
        for lbl in self.cal_labels:
            if str(today) in lbl.cget("text").split():
                lbl.config(bg="pink")
        self.root.after(UPDATE_INTERVAL, self.update_calendar)

    def scroll_text(self):
        display_text = reminder_text[self.reminder_index:] + reminder_text[:self.reminder_index]
        self.reminder_label.config(text=display_text)
        self.reminder_index = (self.reminder_index + 1) % len(reminder_text)
        self.root.after(scroll_speed, self.scroll_text)

    def open_settings(self):
        settings_win = tk.Toplevel(self.root)
        settings_win.title("Settings")
        settings_win.configure(bg=bg_color)
        settings_win.geometry("400x500")

        # Background color
        tk.Label(settings_win, text="Background Color:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(settings_win, text="Choose", command=self.change_bg_color).pack(pady=5)

        # Font color
        tk.Label(settings_win, text="Font Color:", bg=bg_color, fg=fg_color).pack(pady=5)
        tk.Button(settings_win, text="Choose", command=self.change_font_color).pack(pady=5)

        # Font size
        tk.Label(settings_win, text="Font Size:", bg=bg_color, fg=fg_color).pack(pady=5)
        size_var = tk.IntVar(value=font_size)
        tk.Spinbox(settings_win, from_=8, to=72, textvariable=size_var, command=lambda: self.change_font_size(size_var.get())).pack(pady=5)

    def change_bg_color(self):
        global bg_color
        color = colorchooser.askcolor()[1]
        if color:
            bg_color = color
            self.root.configure(bg=bg_color)
            self.clock_label.config(bg=bg_color)
            self.date_label.config(bg=bg_color)
            self.reminder_label.config(bg=bg_color)
            self.cal_frame.config(bg=bg_color)
            self.web_frame.config(bg=bg_color)

    def change_font_color(self):
        global fg_color
        color = colorchooser.askcolor()[1]
        if color:
            fg_color = color
            self.clock_label.config(fg=fg_color)
            self.date_label.config(fg=fg_color)
            self.reminder_label.config(fg=fg_color)
            for lbl in self.cal_labels:
                lbl.config(fg=fg_color)

    def change_font_size(self, size):
        global font_size
        font_size = size
        self.clock_label.config(font=(font_name, font_size))
        self.date_label.config(font=(font_name, font_size-4))
        self.reminder_label.config(font=(font_name, font_size-4))
        for lbl in self.cal_labels:
            lbl.config(font=(font_name, 14))

if __name__ == "__main__":
    root = tk.Tk()
    app = RealtimeLauncher(root)
    root.mainloop()